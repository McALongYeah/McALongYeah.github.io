<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker</title>
      <link href="/2023/11/04/Docker/"/>
      <url>/2023/11/04/Docker/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2023/11/04/Redis/"/>
      <url>/2023/11/04/Redis/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2023/10/30/Spring/"/>
      <url>/2023/10/30/Spring/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2023/10/30/SpringBoot/"/>
      <url>/2023/10/30/SpringBoot/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-几种Controller测试方法</title>
      <link href="/2023/10/25/SpringBoot%20-%E5%87%A0%E7%A7%8DController%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/"/>
      <url>/2023/10/25/SpringBoot%20-%E5%87%A0%E7%A7%8DController%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-的几种Controller测试方法"><a href="#SpringBoot-的几种Controller测试方法" class="headerlink" title="SpringBoot 的几种Controller测试方法"></a>SpringBoot 的几种Controller测试方法</h1><h2 id="Swagger测试"><a href="#Swagger测试" class="headerlink" title="Swagger测试"></a>Swagger测试</h2><h3 id="关于Swagger"><a href="#关于Swagger" class="headerlink" title="关于Swagger"></a><strong>关于Swagger</strong></h3><p><img src="/img/SpringBoot/swagger.png" alt="QQ截图20231022200152"></p><p><em><strong>Swagger 简介</strong></em></p><blockquote><p>Swagger 是一个用于设计、构建、文档化和使用 Restful API 的开源框架。它提供了一组工具，包括用于创建 API 规范的 Swagger 编辑器、用于生成 API 客户端代码的 Swagger Codegen，以及用于 API 文档化和测试的 Swagger UI。</p><p>Swagger 的主要目标是简化开发者在构建 API 时的工作流程，并促进不同团队之间的协作。通过使用 Swagger，开发者可以使用简单的 YAML 或 JSON 文件定义 API 的端点、参数、请求和响应体，并基于这些定义生成文档和代码。这样，开发者可以更好地定义 API 的结构和行为，同时也可以为开发者、测试人员和客户提供一个易于理解和使用的接口文档。</p><p>除了 API 定义和文档生成外，Swagger 还提供了一些工具和插件，以帮助开发者自动生成客户端代码、执行自动化测试以及部署和管理 API。</p></blockquote><p><em><strong>Swagger UI</strong></em></p><blockquote><p>Swagger UI 是 Swagger 的一个组件，用于可视化展示和交互式测试 API 的文档。它基于 Swagger 规范生成一个漂亮和功能丰富的用户界面，让开发者能够更好地理解和使用 API。</p><p>使用 Swagger UI，开发者可以直接在浏览器中查看 API 的所有细节，包括端点、请求和响应的参数、数据类型、示例和说明等。Swagger UI 提供了一个交互式的界面，可以方便地构建和发送请求，并查看返回的结果。它还支持代码片段的自动生成，帮助开发者快速集成 API 到他们的应用程序中。</p><p>Swagger UI 的界面简洁明了，页面左侧是 API 的目录结构，右侧则是选中端点后的详细信息，包括请求参数、响应示例和状态码等。用户可以直接在界面上填写参数并发送请求，在页面上获得实时的响应结果。此外，Swagger UI 还支持测试用例的导入和导出，方便与团队成员共享和合作。</p><p>总结来说，Swagger UI 是一个强大的工具，可用于呈现和测试 API 的文档。它提供了一个直观且易于使用的界面，可以帮助开发者更好地理解、交互和测试他们的 API。</p></blockquote><p><strong>swagger测试的缺点</strong></p><p>1.过于繁多的注解给后续的代码维护带来了许多麻烦,如果代码内容发生的变化,注解对应描述内容也要进行修改,如果未及时修改,会造成文档内容不准确,给后续代码的修改带来了许多麻烦.</p><p>2.安全性问题,对于一个网站,该测试方法只需在Web地址后加上<strong>swagger-ui.html</strong>就可以访问到swagger的后台,可以对代码核心内容进行测试查询,将数据库关键信息暴露出来,不利于数据的保护;</p><p>3.运行时性能开销：Swagger 2 的生成过程需要读取和解析源代码，这可能会引入一些运行时的性能开销。尤其是在大型项目中，这可能会对性能产生一定的影响。</p><h3 id="Swagger-快速开始"><a href="#Swagger-快速开始" class="headerlink" title="Swagger 快速开始"></a>Swagger 快速开始</h3><h4 id="配置pom-xml-引入依赖"><a href="#配置pom-xml-引入依赖" class="headerlink" title="配置pom.xml,引入依赖"></a><strong>配置pom.xml,引入依赖</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;com.spring4all&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;swagger-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;<span class="number">1.9</span><span class="number">.0</span>.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="提供的业务场景"><a href="#提供的业务场景" class="headerlink" title="提供的业务场景"></a><strong>提供的业务场景</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模拟实现一个订餐系统,通过菜品的Id查菜品有关的信息</span><br></pre></td></tr></table></figure><p><strong>entity</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yc.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Resfood</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer fid;</span><br><span class="line">    <span class="keyword">private</span> String fname;</span><br><span class="line">    <span class="keyword">private</span> Double normprice;</span><br><span class="line">    <span class="keyword">private</span> Double realprice;</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">    <span class="keyword">private</span> String fphoto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>service层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yc.biz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> com.yc.bean.Resfood;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ResFoodBiz</span> &#123;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//通过菜品的id查询菜品信息</span></span><br><span class="line">    <span class="keyword">public</span> Resfood <span class="title function_">findById</span><span class="params">(Integer fid)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Mapper层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.yc.bean.Resfood;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ResFoodMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Resfood&gt; &#123;</span><br><span class="line">    <span class="comment">//利用动态代理根据这个接口的方法啊来生成一个代理对象，并将所有的方法实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>ServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yc.biz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.yc.bean.Resfood;</span><br><span class="line"><span class="keyword">import</span> com.yc.dao.ResFoodMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResFoodBizImpl</span> <span class="keyword">implements</span> <span class="title class_">ResFoodBiz</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ResFoodMapper resFoodMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Resfood <span class="title function_">findById</span><span class="params">(Integer fid)</span> &#123;</span><br><span class="line">        <span class="type">QueryWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;fid&quot;</span>,fid);</span><br><span class="line">        <span class="type">Resfood</span> <span class="variable">resfood</span> <span class="operator">=</span> resFoodMapper.selectOne(wrapper);</span><br><span class="line">        <span class="keyword">return</span> resfood;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Contrller层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yc.bean.Resfood;</span><br><span class="line"><span class="keyword">import</span> com.yc.biz.ResFoodBiz;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/resfood&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span><span class="comment">//生成日志</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResFoodController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ResFoodBiz resFoodBiz;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findById&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Resfood <span class="title function_">findById</span><span class="params">(<span class="meta">@RequestParam</span> Integer fid)</span>&#123;</span><br><span class="line">        <span class="type">Resfood</span> <span class="variable">resfood</span> <span class="operator">=</span> resFoodBiz.findById(fid);</span><br><span class="line">        <span class="keyword">return</span> resfood;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span>  <span class="comment">//开启seagger注解驱动</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.yc.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ResApp.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="swagger注解的使用方法"><a href="#swagger注解的使用方法" class="headerlink" title="swagger注解的使用方法"></a><strong>swagger注解的使用方法</strong></h4><h5 id="Api"><a href="#Api" class="headerlink" title="@Api"></a><strong>@Api</strong></h5><p>@Api 注解用于标注一个Controller（Class）。<br>tags&#x3D;”说明该类的作用，可以在前台界面上看到的注解”<br>value&#x3D;”该参数无意义，在UI界面上看不到，不需要配置”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(value = &quot;ResFoodController&quot;, tags = &quot;菜品的控制层&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResFoodController</span> &#123;</span><br><span class="line">    . . .</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ApiOperation"><a href="#ApiOperation" class="headerlink" title="ApiOperation"></a><strong>ApiOperation</strong></h5><p>注解在用于对一个操作或HTTP方法进行描述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ApiOperation 注解在用于对一个操作或HTTP方法进行描述</span></span><br><span class="line">  <span class="meta">@ApiOperation(&quot;根据菜品id查菜品信息&quot;)</span></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/findById&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Resfood <span class="title function_">findById</span><span class="params">(</span></span><br><span class="line"><span class="params">          <span class="meta">@RequestParam</span> Integer fid)</span>&#123;</span><br><span class="line">      <span class="type">Resfood</span> <span class="variable">resfood</span> <span class="operator">=</span> resFoodBiz.findById(fid);</span><br><span class="line">      <span class="keyword">return</span> resfood;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="ApiParam"><a href="#ApiParam" class="headerlink" title="@ApiParam"></a><strong>@ApiParam</strong></h5><p>用在参数列表的请求参数前面,对参数进行描述或说明是否为必添项等说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Resfood <span class="title function_">findById</span><span class="params">(</span></span><br><span class="line"><span class="params">           <span class="meta">@ApiParam(name = &quot;fid&quot;,value = &quot;菜品的id号&quot;)</span></span></span><br><span class="line"><span class="params">           <span class="meta">@RequestParam</span> Integer fid)</span></span><br></pre></td></tr></table></figure><h5 id="ApiImplicitParam"><a href="#ApiImplicitParam" class="headerlink" title="@ApiImplicitParam"></a><strong>@ApiImplicitParam</strong></h5><p><strong>@ApiImplicitParams</strong>：⽤在⽅法上包含⼀组参数说明</p><p><strong>@ApiImplicitParam</strong>：⽤在@ApiImplicitParams注解中,指定一个请求参数的各个方面</p><ul><li><p>name: 参数名</p></li><li><p>value: 参数的说明、解释</p></li><li><p>required: 是否必须传参</p></li><li><p>paramType：参数放什么位置</p><blockquote><p>path: 以地址的形式提交数据</p><p>query: 直接跟参数完成⾃动映射赋值</p><p>body: 以流的形式提交  仅⽀持POST</p><p>header: 参数在request headers⾥边提交</p><p>form: 以form表单的形式提交仅⽀持POST</p></blockquote></li><li><p>dataType: 参数类型，默认String,其它值dataType&#x3D;”Integer”</p></li><li><p>defaultValue: 参数的默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiImplicitParams(</span></span><br><span class="line"><span class="meta">         @ApiImplicitParam(</span></span><br><span class="line"><span class="meta">                 name = &quot;fid&quot;,</span></span><br><span class="line"><span class="meta">                 value = &quot;菜品的id号2&quot;,</span></span><br><span class="line"><span class="meta">                 paramType = &quot;query&quot;,</span></span><br><span class="line"><span class="meta">                 dataType = &quot;Integer&quot;</span></span><br><span class="line"><span class="meta">         )</span></span><br><span class="line"><span class="meta"> )</span></span><br><span class="line"> <span class="keyword">public</span> Resfood <span class="title function_">findById</span><span class="params">( ... )</span>&#123;</span><br><span class="line">     . . .</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><p><font color=Red>注: @ApiImplicitParams 与 @ApiParam 同时使用时 前者的优先级会高于后者并将其覆盖掉</font></p><p><strong>swagger-ui上的效果</strong></p><p><img src="/img/SpringBoot/swagger-ApiImplicitParam1.png"></p><p><strong>点击Try it out,并输入你要查询的菜品id,最后点击Execte按钮就可以看到结果了</strong></p><p><img src="/img/SpringBoot/swagger-ApiImplicitparam2.png"></p><h5 id="ApiModel"><a href="#ApiModel" class="headerlink" title="ApiModel"></a><strong>ApiModel</strong></h5><p><strong>@ApiModel: 用在响应类上，表示一个返回响应数据的信息</strong></p><p>**@ApiModelProerty:用在属性上，面熟响应类的属性*</p><ul><li>一般用在post 创建，使用@RequestBody的时候</li><li>请求参数无法使用@ApiImplicitParam</li></ul><blockquote><p>@ApiModel注解是用在接口相关的实体类上的注解，它主要是用来对使用该注解的接口相关的实体类添加额外的描述信息，常常和@ApiModelProperty注解配合使用</p><p>@ApiModelProperty注解则是作用在接口相关实体类的属性（字段）上的注解，用来对具体的接口相关实体类中的参数添加额外的描述信息，除了可以和 @ApiModel 注解关联使用，也会单独拿出来用。</p><p>作用域不同，@ApiModel作用在类上，@ApiModel作用来属性上</p></blockquote><p><strong>ApiModelProperty属性：</strong>value、name、required 、hidden、allowEmptyValue、hidden、dataType、example</p><p><strong>allowEmptyValue：</strong> 用来描述实体参数的值是否可以为空值。在 ApiModelProperty 注解中直接声明 allowEmptyValue属性的值即可，如果不声明该属性，则默认为false，即字段参数的值不可以为空。</p><p><strong>hidden：</strong> 用来描述实体中参数字段是否显示在Swagger界面中，默认也是false，true表示隐藏。</p><p><strong>example：</strong> </p><p>在<code>@ApiModelProperty</code>注解中，<code>example</code>属性用于提供属性的示例值，以帮助用户理解和使用该属性。</p><p>例如，考虑以下模型类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(example = &quot;John Doe&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(example = &quot;john.doe@example.com&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter and setter methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，<code>@ApiModelProperty</code>注解用于<code>name</code>和<code>email</code>属性，分别使用<code>example</code>属性指定了示例值。这些示例值可以是任何合法的属性值，用于说明属性的预期内容。</p><p>当使用此模型类生成API文档或进行验证时，示例值将被显示或用于验证输入。例如，如果使用Swagger生成API文档，示例值将在属性描述中显示出来，以帮助用户了解属性的期望格式和值。</p><p>总之，<code>@ApiModelProperty</code>中的<code>example</code>属性用于提供属性的示例值，以便在生成文档或进行验证时使用。</p><p><strong>在swagger-ui中的呈现效果:</strong></p><p><strong>示例代码:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;Resfood&quot;,description = &quot;菜品实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Resfood</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(name=&quot;fid&quot;,value = &quot;菜品id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer fid;</span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;fname&quot;,value = &quot;菜品名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String fname;</span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;normprice&quot;,value = &quot;原件&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Double normprice;</span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;realprice&quot;,value = &quot;真实价&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Double realprice;</span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;detail&quot;,value = &quot;细节描述&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;fphoto&quot;,value = &quot;图片&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String fphoto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/SpringBoot/swagger-Model.png"></p><h2 id="postman测试"><a href="#postman测试" class="headerlink" title="postman测试"></a>postman测试</h2><h3 id="软件简介"><a href="#软件简介" class="headerlink" title="软件简介"></a>软件简介</h3><blockquote><p>Postman是一个接口测试工具,在做接口测试的时候,Postman相当于一个客户端,它可以模拟用户发起的各类HTTP请求,将请求数据发送至服务端,获取对应的响应结果, 从而验证响应中的结果数据是否和预期值相匹配;并确保开发人员能够及时处理接口中的bug,进而保证产品上线之后的稳定性和安全性。 它主要是用来模拟各种HTTP请求的(如:get&#x2F;post&#x2F;delete&#x2F;put..等等),Postman与浏览器的区别在于有的浏览器不能输出Json格式,而Postman更直观接口返回的结果。</p></blockquote><p>官方下载地址: </p><p><a href="https://www.postman.com/downloads/" target="_blank">postman</a></p><h3 id="postman快速开始"><a href="#postman快速开始" class="headerlink" title="postman快速开始"></a>postman快速开始</h3><p><img src="/img/SpringBoot/postman-test.png"></p><h2 id="Mock测试-模拟Web-请求"><a href="#Mock测试-模拟Web-请求" class="headerlink" title="Mock测试 -&gt; 模拟Web 请求"></a>Mock测试 -&gt; 模拟Web 请求</h2><h3 id="什么是Mock"><a href="#什么是Mock" class="headerlink" title="什么是Mock ?"></a>什么是Mock ?</h3><blockquote><p>在面向对象的程序设计中，模拟对象（英语：mock object）是以可控的方式模拟真实对象行为的假对象。在编程过程中，通常通过模拟一些输入数据，来验证程序是否达到预期结果。</p></blockquote><h3 id="为什么使用Mock对象"><a href="#为什么使用Mock对象" class="headerlink" title="为什么使用Mock对象 ?"></a>为什么使用Mock对象 ?</h3><blockquote><p>使用模拟对象，可以模拟复杂的、真实的对象行为。如果在单元测试中无法使用真实对象，可采用模拟对象进行替代。</p></blockquote><h3 id="什么是MockMVC"><a href="#什么是MockMVC" class="headerlink" title="什么是MockMVC ?"></a>什么是MockMVC ?</h3><blockquote><p>MockMvc 是 SpringFramework 中的一个测试工具，用于模拟 HTTP 请求和响应的行为。MockMvc 可以模拟发送 GET、POST、PUT、DELETE 等 HTTP 请求，并验证响应的状态码、内容类型和响应体等。</p></blockquote><h3 id="Mock-快速开始"><a href="#Mock-快速开始" class="headerlink" title="Mock  快速开始"></a>Mock  快速开始</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    表示你的项目继承自这个 starter-parent: 项目依赖信息</span><br><span class="line">        依赖仲裁</span><br><span class="line">        --&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">2.7</span><span class="number">.16</span>&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    </span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h4 id="启用MockMvc"><a href="#启用MockMvc" class="headerlink" title="启用MockMvc"></a>启用MockMvc</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在测试类中添加 @SpringBootTest 和 @AutoConfigureMockMvc 注释启用 MockMvc。</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = ResApp.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResAppTest</span> &#123;</span><br><span class="line">    . . .</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注入MockMvc对象"><a href="#注入MockMvc对象" class="headerlink" title="注入MockMvc对象"></a>注入MockMvc对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MockMvc mockMvc;</span><br></pre></td></tr></table></figure><h4 id="模拟Http请求"><a href="#模拟Http请求" class="headerlink" title="模拟Http请求"></a>模拟Http请求</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用 MockMvc 对象的 perform 方法模拟 HTTP 请求。</span></span><br><span class="line"><span class="comment">//请求路径为 “/food/findByFid”</span></span><br><span class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">&quot;/resfood/findById&quot;</span>)</span><br><span class="line">                 <span class="comment">//设置请求的参数</span></span><br><span class="line">                .param(<span class="string">&quot;fid&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                *将请求的 Content-Type 设置为 application/json，</span></span><br><span class="line"><span class="comment">                *表示请求正文的内容为 JSON 格式。*/</span></span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><h4 id="验证响应状态码、内容、响应体"><a href="#验证响应状态码、内容、响应体" class="headerlink" title="验证响应状态码、内容、响应体"></a>验证响应状态码、内容、响应体</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//期望返回的 HTTP 状态码为 200。</span></span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                <span class="comment">//期望返回的结果中，属性 data.fname 的值与预期的 resfood.getFname() 相等，忽略大小写。</span></span><br><span class="line">                .andExpect(MockMvcResultMatchers.jsonPath(<span class="string">&quot;$.data.fname&quot;</span>, Matchers.equalToIgnoringCase(resfood.getFname())))</span><br><span class="line">                <span class="comment">//使用 andExpect 方法验证响应的内容类型</span></span><br><span class="line">                .andExpect(content().contentType(MediaType.APPLICATION_JSON))</span><br><span class="line">                <span class="comment">//在控制台打印请求和响应的详细信息。</span></span><br><span class="line">                .andDo(print())</span><br><span class="line">                <span class="comment">//返回执行结果。</span></span><br><span class="line">                .andReturn();</span><br></pre></td></tr></table></figure><p>。。。。。。。未完待续。。。。。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Next</title>
      <link href="/2023/10/17/Next/"/>
      <url>/2023/10/17/Next/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第二篇文章"><a href="#这是我的第二篇文章" class="headerlink" title="这是我的第二篇文章"></a>这是我的第二篇文章</h2><p><strong>代码块测试</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.yc;</span><br><span class="line"></span><br><span class="line">import org.mybatis.spring.annotation.MapperScan;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableSwagger2</span><br><span class="line">@MapperScan(&quot;com.yc.dao&quot;)</span><br><span class="line">public class ResApp &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ResApp.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><h3 id="第二部分子标题1"><a href="#第二部分子标题1" class="headerlink" title="第二部分子标题1"></a>第二部分子标题1</h3><p>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。。<br>。<br>。。<br>。<br>。<br>.<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。</p><h3 id="第二部分子标题2"><a href="#第二部分子标题2" class="headerlink" title="第二部分子标题2"></a>第二部分子标题2</h3><p>。<br>。<br>。<br>。<br>。<br>。<br>。</p><h2 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">111</span><br></pre></td></tr></table></figure><p><code>22</code><br><code>33333</code></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello</title>
      <link href="/2023/10/15/Hello/"/>
      <url>/2023/10/15/Hello/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第一篇文章"><a href="#这是我的第一篇文章" class="headerlink" title="这是我的第一篇文章"></a>这是我的第一篇文章</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
